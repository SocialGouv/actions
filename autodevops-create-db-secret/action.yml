name: "Create database k8s secret"
description: "Create random and secure database k8s secret if not already exists"
inputs:
  kubeconfig:
    description: "The Kubernetes authentication configuration"
  rancherId:
    description: "The Rancher project ID, usually secrets.RANCHER_PROJECT_ID"
  socialgouvBaseDomain:
    description: "The base domain name, usually secrets.SOCIALGOUV_BASE_DOMAIN"
  environment:
    description: "The deployment environment (dev | preprod | prod)"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get project and namespace names
      shell: bash
      run: |
        if test -f ".github/dev.env"; then
          cat ".github/dev.env" >> $GITHUB_ENV
        fi

    - name: Install kosko-charts autodevops
      shell: bash
      run: |
        rm -rf /tmp/autodevops
        npx degit SocialGouv/kosko-charts/templates/autodevops /tmp/autodevops
        yarn --cwd /tmp/autodevops

    - name: Generate k8s namespace
      shell: bash
      run: |
        yarn --cwd /tmp/autodevops --silent generate --env dev _namespace > namespace-${ENVIRONMENT}.yml
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        SOCIALGOUV_CONFIG_PATH: /tmp/autodevops/config.json
        RANCHER_PROJECT_ID: ${{ inputs.rancherId || env.RANCHER_PROJECT_ID }}
        SOCIALGOUV_BASE_DOMAIN: ${{ inputs.socialgouvBaseDomain || env.SOCIALGOUV_BASE_DOMAIN }}

    - name: Get namespace name
      uses: mikefarah/yq@v4.13.4
      id: namespace
      with:
        cmd: yq eval '.metadata.name' namespace-${{ inputs.environment }}.yml

    - name: Generate create-db-secret manifests
      shell: bash
      run: yarn --cwd /tmp/autodevops --silent generate --env dev jobs/create-db-secret > create-db-secret.yml
      env:
        SOCIALGOUV_CONFIG_PATH: /tmp/autodevops/config.json
        RANCHER_PROJECT_ID: ${{ inputs.rancherId || env.RANCHER_PROJECT_ID }}
        SOCIALGOUV_BASE_DOMAIN: ${{ inputs.socialgouvBaseDomain || env.SOCIALGOUV_BASE_DOMAIN }}

    - name: Archive create-db-secret manifests
      uses: actions/upload-artifact@v2
      with:
        name: create-db-secret.yml
        path: create-db-secret.yml

    - name: Create kubernetes config
      shell: bash
      run: |
        mkdir -p ~/.kube
        touch ~/.kube/config
        echo ${{ inputs.kubeconfig }} | base64 -d > ~/.kube/config

    - name: Create namespace if doesn't exists
      shell: bash
      run: kubectl apply -f namespace-${{ inputs.environment }}.yml || true


    - name: Create database secret if doesn't exists
      shell: bash
      run: |
        kubectl delete --namespace=${{ steps.namespace.outputs.result }} job/create-db-secret || true
        kubectl apply --namespace=${{ steps.namespace.outputs.result }} -f create-db-secret.yml

    - name: Wait for job to complete
      shell: bash
      run: |
        # k8s-wait-job ${{ steps.namespace.outputs.result }} create-db-secret
        K8S_NAMESPACE=${{ steps.namespace.outputs.result }}
        JOB_NAME=create-db-secret
        JOB="job/$JOB_NAME"
        retval_complete=1
        retval_failed=1
        while [[ $retval_complete -ne 0 ]] && [[ $retval_failed -ne 0 ]]; do
          sleep 2
          output=$(timeout 2s kubectl -n $K8S_NAMESPACE wait --for=condition=complete $JOB --timeout=0 2>&1)
          retval_complete=$?
          output=$(timeout 2s kubectl -n $K8S_NAMESPACE wait --for=condition=failed $JOB --timeout=0 2>&1)
          retval_failed=$?
          wait
        done
        if [ $retval_failed -eq 0 ]; then
          echo "$JOB failed"
          exit 1
        else
          echo "$JOB complete"
        fi


