name: "Generate manifests"
description: "Generate k8s manifests via kosko-charts autodevops"
inputs:
  environment:
    description: "The deployment environment (dev | preprod | prod)"
    required: true
  productionNamespace:
    description: "Override production namesapce"
  rancherId:
    description: "The Rancher project ID, usually secrets.RANCHER_PROJECT_ID"
  socialgouvBaseDomain:
    description: "The base domain name, usually secrets.SOCIALGOUV_BASE_DOMAIN"
  kosko-args:
    description: "Specify which kosko components to generate"
  koskoChartsVersion:
    description: "Version of kosko-charts action to degit"
  pgUserSecretPrefix:
    description: "Prefix for pg-user secret name, oldly azure-pg-user, in future pg-user"
    default: azure-pg-user
  manifestsName:
    description: "The name of the generated manifests artifact"

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Load environment variables
      shell: bash
      run: |
        if test -f ".github/${{ inputs.environment }}.env"; then
          cat ".github/${{ inputs.environment }}.env" >> $GITHUB_ENV
        fi

    - name: Degit autodevops template
      shell: bash
      run: |
        npx degit SocialGouv/kosko-charts/templates/autodevops#${{ inputs.koskoChartsVersion || env.KOSKO_CHARTS_VERSION || 'master' }} /tmp/autodevops
        rm -rf /tmp/autodevops/environments

    - name: Copy application k8s config to autodevops
      shell: bash
      run: |
        DEST="/tmp/autodevops"

        if [ -d ".socialgouv/environments" ]; then
          echo "$ cp -r .socialgouv/environments $DEST/environments"
          cp -r .socialgouv/environments $DEST/environments
        fi

        if [ -f ".socialgouv/config.json" ]; then	
          # use autodevops kosko-charts template
          echo "$ cp .socialgouv/config.json $DEST/"	
          cp .socialgouv/config.json $DEST/	
        elif [ -d ".socialgouv/components" ]; then
          # use userland `.socialgouv` folder instead of autodevops template when `components` folder is found
          echo "rm -rf $DEST/components"
          rm -rf $DEST/components
          echo "$ cp -r .socialgouv/* $DEST/"
          cp -r .socialgouv/* $DEST/
        else
          echo "no socialgouv config.json or components found :/"
          exit 1
        fi
        if [ -d ".socialgouv/__tests__" ]; then
          echo "Copy tests"
          cp -r .socialgouv/__tests__ $DEST/__tests__
        fi

    - name: Install dependencies
      shell: bash
      run: |
        yarn --cwd /tmp/autodevops

    - name: Run kosko manifests tests
      shell: bash
      run: |
        if [ -d ".socialgouv/__tests__" ]; then
          echo "Run kosko manifests tests"
          yarn --cwd /tmp/autodevops test
        fi

    - name: Generate k8s namespace
      shell: bash
      run: |
        yarn --cwd /tmp/autodevops --silent generate --env ${ENVIRONMENT} _namespace > namespace-${ENVIRONMENT}.yml
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        RANCHER_PROJECT_ID: ${{ inputs.rancherId || env.RANCHER_PROJECT_ID }}
        SOCIALGOUV_CONFIG_PATH: /tmp/autodevops/config.json
        SOCIALGOUV_BASE_DOMAIN: ${{ inputs.socialgouvBaseDomain || env.SOCIALGOUV_BASE_DOMAIN }}
        SOCIALGOUV_PRODUCTION_NAMESPACE: ${{ inputs.productionNamespace }}
        SOCIALGOUV_PRODUCTION: ${{ inputs.environment == 'prod' && true || '' }}
        SOCIALGOUV_PREPRODUCTION: ${{ inputs.environment == 'preprod' && true || '' }}
        PG_USER_SECRET_PREFIX: ${{ inputs.pgUserSecretPrefix }}

    - name: Generate k8s manifests
      shell: bash
      run: |
        echo SOCIALGOUV_BASE_DOMAIN: $SOCIALGOUV_BASE_DOMAIN
        yarn --cwd /tmp/autodevops --silent generate --env ${ENVIRONMENT} ${{ inputs.kosko-args }} > manifests-${ENVIRONMENT}.yml
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        RANCHER_PROJECT_ID: ${{ inputs.rancherId || env.RANCHER_PROJECT_ID }}
        SOCIALGOUV_CONFIG_PATH: /tmp/autodevops/config.json
        SOCIALGOUV_BASE_DOMAIN: ${{ inputs.socialgouvBaseDomain || env.SOCIALGOUV_BASE_DOMAIN }}
        SOCIALGOUV_PRODUCTION_NAMESPACE: ${{ inputs.productionNamespace }}
        SOCIALGOUV_PRODUCTION: ${{ inputs.environment == 'prod' && true || '' }}
        SOCIALGOUV_PREPRODUCTION: ${{ inputs.environment == 'preprod' && true || '' }}
        PG_USER_SECRET_PREFIX: ${{ inputs.pgUserSecretPrefix }}

    - name: Archive k8s namespace
      uses: actions/upload-artifact@v2
      with:
        name: namespace-${{ inputs.environment }}.yml
        path: namespace-${{ inputs.environment }}.yml

    - name: Archive k8s manifests
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.manifestsName && inputs.manifestsName || 'manifests' }}-${{ inputs.environment }}.yml
        path: manifests-${{ inputs.environment }}.yml
